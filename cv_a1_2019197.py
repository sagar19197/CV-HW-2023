# -*- coding: utf-8 -*-
"""CV_A1_2019197.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aMfiQRDBwHGzR7BtqFb52oqOZxCRgZvC

# Computer Vision, Assignment - 1
Name : **Sagar Suman** | Roll No. **2019197**

## Question 1: Image Classification

### 1.1) Referring to SVHN Dataset

#### Part a)

Mounting content
"""

from google.colab import drive
drive.mount("/content/gdrive")

"""Installing WandB"""

pip install wandb

"""Importing WandB and intilializing it."""

import wandb

# Initilializing with API key
wandb.login(key="bf141877d75b0ea4b3f9cad3b636889145d1fe44");
wandb.init(project = "CV_A1_Q1");

"""importing scipy.io for processing data file"""

import scipy.io

"""Loading dataset"""

SVHN_data = scipy.io.loadmat('/content/gdrive/MyDrive/CV-Assginments-Datasets/CV-A1/Q1/train_32x32.mat');

# For printing variables in this dataset
for variables in SVHN_data.keys():
    print(variables)

"""Extracting X and y"""

# FOR X-
X = SVHN_data['X'];
# Printing shape 
print("SHAPE OF X",X.shape);
# FOR y - 
y = SVHN_data['y'];
print("SHAPE OF y",y.shape)

"""Showing DataSet Items"""

import matplotlib.pyplot as plt
# For random Images
import random;

# As each image is X[:,:,:,i], and label is y[i]
figure = plt.figure();
for dataItems in range(1,17):
  axis = figure.add_subplot(4,4,dataItems);
  random_image = random.randint(1, len(y));
  axis.imshow(X[:,:,:,random_image]);
  axis.set_title("Label : "+str(y[random_image]));
  
# Showing image
figure.suptitle("SVHN_Dataset");
figure.tight_layout();
figure.show();

"""We need to reshape X, so that we can split it."""

# Importing Numpy
import numpy as np

# 32 x 32 x 3 = 3072
X = np.array(X);
# Reshaping
X = X.reshape(3072, 73257);
# Transposing 
X = np.transpose(X);
# Printing shape
print(X.shape);

"""For splitting train and test, we will using sklearn's train_test_split() method"""

# Importing train_test_split
from sklearn.model_selection import train_test_split

"""Firstly, we will split the data set in 90:10 for train+validation and testing"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1);

"""Then splitting, for 20% validation set """

X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.2);

"""Showing Dimension of Train, Testing and Validation"""

print("X_train:",X_train.shape,"y_train:", y_train.shape);
print("X_val:",X_val.shape," y_val:",y_val.shape);
print("X_test:",X_test.shape," y_test:", y_test.shape);

"""#### Part b)

Importing PyTorch
"""

import torch
from torch.utils.data import Dataset, DataLoader

"""Creating Custom Dataset Class"""

class SVHN_Dataset(Dataset):

  # Init Function
  def __init__(self, data_X, data_y):
    self.data_X = data_X;
    self.data_y = data_y;

  # Len Function
  def __len__(self):
    return len(self.data_X);

  # getItem Function
  def __getitem__(self, idx):
    return self.data_X[idx], self.data_y[idx];

"""Creating Custom DataLoaders for all Splits"""

# For Training Split -
X_train_loader = DataLoader(SVHN_Dataset(X_train, y_train), batch_size = 32, shuffle = True);

# For Validation Split -
X_val_loader = DataLoader(SVHN_Dataset(X_val, y_val), batch_size = 32, shuffle = True);

# For Test Split -
X_test_loader = DataLoader(SVHN_Dataset(X_test, y_test), batch_size = 32, shuffle = True);

"""#### Part c)

Visualizing Data Distribution across class Labels
"""

# For Training 
y_train_class_labels, y_train_count = np.unique(y_train, return_counts = True);

# For Validation 
y_val_class_labels, y_val_count = np.unique(y_val, return_counts = True);

"""For Training"""

# Using Bar Graph
plt.bar(y_train_class_labels, y_train_count);
plt.xlabel("Labels ->");
plt.ylabel("Counts ->");
plt.xticks(y_train_class_labels);
plt.title("Data Distribution across Labels for Training Set");

plt.show()

"""For Validation Sets"""

# Using Bar Graph
plt.bar(y_val_class_labels, y_val_count);
plt.xlabel("Labels ->");
plt.ylabel("Counts ->");
plt.xticks(y_val_class_labels);
plt.title("Data Distribution across Labels for Validation Set");

plt.show()

"""### 1.1) Training a CNN through Scratch

"""

